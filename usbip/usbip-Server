#!/bin/bash

### BEGIN INIT INFO
# Provides:          usbip-Server
# Required-Start:    $local_fs $network $named $time $syslog
# Required-Stop:     $local_fs $network $named $time $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       P5Software USB IP Server
### END INIT INFO

# ------------------------------------------------------------
# Configuration
# ------------------------------------------------------------
P5SoftwareHome=/etc/P5Software/Linux-Tools
scripthome=$P5SoftwareHome/usbip

# Must be a valid filename
NAME=usbip-Server
PIDFILE=/var/run/$NAME.pid

# Read the configuration file
source $scripthome/$NAME.conf

#This is the command to be run, give the full pathname
PATH=/usr/sbin
EXECUTABLE=usbipd
DAEMON=$PATH/$EXECUTABLE

DAEMON_OPTS="-D"
BIND_OPTS="usbip bind -b $busID"
UNBIND_OPTS="usbip unbind -b $busID"

export PATH="/usr/sbin:/sbin:/usr/bin:/bin"

case "$1" in


# ------------------------------------------------------------
# Start
# ------------------------------------------------------------
start)
if [ -f $PIDFILE ]; then
echo 'Service already running.'
exit 1
fi

#Set the environment appropriately
echo "Setting modprobe usbip-core..."
modprobe usbip-core
echo "Modprobe set."
echo "Setting modprobe usbip-host..."
modprobe usbip-host
echo "Modprobe set."

echo "Starting service..."
start-stop-daemon --start --pidfile $PIDFILE --make-pidfile --exec $DAEMON -- $DAEMON_OPTS

#Force the PID to be correct, this is required because we're forking
echo "Creating pidfile..."
cat /dev/null > $PIDFILE
pidof $EXECUTABLE >> $PIDFILE
echo "Created pidfile " $(cat $PIDFILE)

echo "Service started."

echo "Binding device..."
$BIND_OPTS
echo "Bind complete."
;;


# ------------------------------------------------------------
# Stop
# ------------------------------------------------------------
stop)
if [ ! -f $PIDFILE ]; then
echo 'Service not running.'
exit 3
fi

#Unbind the device
echo "Unbinding device..."
$UNBIND_OPTS
echo "Unbind complete."

#Stop the service
echo "Stopping service..."
start-stop-daemon --stop --pidfile $PIDFILE --remove-pidfile
echo "Service stopped."
exit 0
;;


# ------------------------------------------------------------
# Status
# ------------------------------------------------------------
status)
status_of_proc $PATH $EXECUTABLE && exit 0 || exit $?
;;


# ------------------------------------------------------------
# Uninstall
# ------------------------------------------------------------
uninstall)
if [ -f $PIDFILE ]; then
echo 'You must stop the service before you can uninstall it.'
exit 1
fi

echo "Are you really sure you want to uninstall this service? That cannot be undone. [yes|No] "
read SURE
if [ "$SURE" = "yes" ]; then
update-rc.d -f $NAME remove
rm -fv "$0"
fi
;;


# ------------------------------------------------------------
# Undefined
# ------------------------------------------------------------
*)
echo "Usage: "$1" {start|stop|status|uninstall}"
exit 1
esac

exit 0